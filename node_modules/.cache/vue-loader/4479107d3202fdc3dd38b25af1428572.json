{"remainingRequest":"C:\\Users\\ruuan\\source\\repos\\VuejsApp2\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\ruuan\\source\\repos\\VuejsApp2\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\ruuan\\source\\repos\\VuejsApp2\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ruuan\\source\\repos\\VuejsApp2\\src\\App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"C:\\Users\\ruuan\\source\\repos\\VuejsApp2\\src\\App.vue","mtime":1654718818595},{"path":"C:\\Users\\ruuan\\source\\repos\\VuejsApp2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1638373388934},{"path":"C:\\Users\\ruuan\\source\\repos\\VuejsApp2\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1638373393479},{"path":"C:\\Users\\ruuan\\source\\repos\\VuejsApp2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1638373388934},{"path":"C:\\Users\\ruuan\\source\\repos\\VuejsApp2\\node_modules\\vue-loader\\lib\\index.js","mtime":1638373392080}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}